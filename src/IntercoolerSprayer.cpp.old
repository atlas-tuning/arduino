#include "Table.h"
#include "Variable.h"

#include "Output.h"
#include "Input.h"
#include "GPIOInput.h"
#include "GPIOOutput.h"

#include "Helper.h"


#define RXD2 16
#define TXD2 17

#define DRAG_MODE_T_DELTA_F 50.0
#define TRACK_MODE_T_DELTA_F 30.0
#define THROTTLE_MIN_PERCENT 0.30 // Only active above 30% throttle (track mode)

std::vector<std::unique_ptr<Output>> outputs;
std::vector<std::unique_ptr<Table>> tables;
std::vector<std::unique_ptr<Input>> inputs;

#if defined(ARDUINO)
#include <Arduino.h>
//#define DEBUG

GPIOInput* newInput(std::string* name, int pin, int resistorMode, int type) {
    Serial.write("Configuring input ");
    Serial.write(name->c_str());
    Serial.write("...\n");

    GPIOInput* input = new GPIOInput(name, pin, resistorMode, type);
    return input;
}

 void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.write("Constructing inputs...\n");

    GPIOInput* mapSel = newInput(new std::string("map_sel"), 
      GPIO_NUM_27, GPIOINPUT_RESISTOR_MODE_PULLDOWN, GPIOINPUT_TYPE_DIGITAL);
    inputs.push_back(std::unique_ptr<Input>(mapSel));
      
    GPIOInput* manifoldTemp = newInput(new std::string("temp_manifold_v"), 
      GPIO_NUM_26, GPIOINPUT_RESISTOR_MODE_PULLUP, GPIOINPUT_TYPE_ANALOG);
    inputs.push_back(std::unique_ptr<Input>(manifoldTemp));

    GPIOInput* inletTemp = newInput(new std::string("temp_inlet_v"), 
      GPIO_NUM_25, GPIOINPUT_RESISTOR_MODE_PULLUP, GPIOINPUT_TYPE_ANALOG);
    inputs.push_back(std::unique_ptr<Input>(inletTemp));

    GPIOInput* throttle = newInput(new std::string("throttle_v"), 
      GPIO_NUM_33, GPIOINPUT_RESISTOR_MODE_PULLDOWN, GPIOINPUT_TYPE_ANALOG);
    inputs.push_back(std::unique_ptr<Input>(throttle));

    GPIOInput* shot = newInput(new std::string("shot_v"), 
      GPIO_NUM_32, GPIOINPUT_RESISTOR_MODE_PULLDOWN, GPIOINPUT_TYPE_DIGITAL);
    inputs.push_back(std::unique_ptr<Input>(shot));

    // Setup all those inputs
    Serial.write("Setting up inputs...\n");
    for (auto const& i : inputs) {
      Serial.write("Setting up input ");
      Serial.write(i->getName()->c_str());
      Serial.write("...\n");

      try {
        i->setup();
      } catch (int num) {
        Serial.write("Input setup failed!");
        exit(num);
      }
    }

    // Make a bunch of tables
    Serial.write("Constructing tables...\n");

    Table* temp_inlet_c = newTable(new std::string("temp_inlet_f"),
      newDimensionVec(
        newDimension(inletTemp->getPrimaryValue(), &LINEAR_INTEGRATION, { 
          0.00, 0.16, 0.32, 0.48, 0.64, 0.80, 0.96, 1.12, 1.28, 1.44, 1.60,
           1.76, 1.92, 2.08, 2.24, 2.40, 2.56, 2.72, 2.88, 3.04, 3.20, 3.36,
            3.52, 3.68, 4.00, 4.16, 4.32, 4.48, 4.64, 4.80, 4.96
        })
      ), newDataVec({
        356.0, 356.0, 293.0, 255.0, 230.0, 210.0, 196.0, 181.0, 171.0, 160.0, 151.0, 
        142.0, 135.0, 127.0, 120.0, 113.0, 106.0, 99.0, 91.0, 86.0, 79.0, 72.0, 64.0,
        55.0, 48.0, 37.0, 28.0, 16.0, -2.0, -29.0, -40.0, -40.0
      }));
    tables.push_back(std::unique_ptr<Table>(temp_inlet_c));
    
    Table* temp_manifold_c = newTable(new std::string("temp_manifold_f"),
      newDimensionVec(
        newDimension(manifoldTemp->getPrimaryValue(), &LINEAR_INTEGRATION, { 
          0.00, 0.16, 0.32, 0.48, 0.64, 0.80, 0.96, 1.12, 1.28, 1.44, 1.60, 1.76,
          1.92, 2.08, 2.24, 2.40, 2.56, 2.72, 2.88, 3.04, 3.20, 3.36, 3.52, 3.68,
          3.84, 4.00, 4.16, 4.32, 4.48, 4.64, 4.80, 4.96
        })
      ), newDataVec({
        266.0, 266.0, 266.0, 252.0, 228.0, 210.0, 194.0, 181.0, 171.0, 162.0,
        153.0, 144.0, 136.0, 129.0, 122.0, 115.0, 108.0, 100.0, 93.0, 86.0,
        79.0, 72.0, 64.0, 57.0, 48.0, 39.0, 27.0, 14.0, -4.0, -33.0, -40.0, -40.0
      }));
    tables.push_back(std::unique_ptr<Table>(temp_manifold_c));

    Table* throttle_pos = newTable(new std::string("throttle_pos"),
      newDimensionVec(
        newDimension(throttle->getPrimaryValue(), &LINEAR_INTEGRATION, { 
          0.10, 4.75
        })
      ), newDataVec({
        0.0, 1.0
      }));
    tables.push_back(std::unique_ptr<Table>(throttle_pos));

    Table* throttle_trigger = newTable(new std::string("throttle_trigger"),
      newDimensionVec(
        newDimension(throttle->getPrimaryValue(), &FLOOR_INTEGRATION, { 
          0.00, THROTTLE_MIN_PERCENT
        }),
        newDimension(mapSel->getPrimaryValue(), &FLOOR_INTEGRATION, { 
          0.00, 1.00
        })
      ), newDataVec({
        // drag mode
        1.0, 1.0, // Bypass throttle trigger

        // track mode
        0.0, 1.0, // Use throttle trigger
      }));
    tables.push_back(std::unique_ptr<Table>(throttle_trigger));

    Table* temp_delta_target = newTable(new std::string("temp_delta_target_f"),
      newDimensionVec(
        newDimension(mapSel->getPrimaryValue(), &FLOOR_INTEGRATION, { 
          0.00, 1.00
        })
      ), newDataVec({
        DRAG_MODE_T_DELTA_F, TRACK_MODE_T_DELTA_F
      }));
    tables.push_back(std::unique_ptr<Table>(temp_delta_target));

    double temp_limit = 1000.0;
    Table* temp_delta = newTable(new std::string("temp_delta_f"),
      newDimensionVec(
        newDimension(temp_manifold_c, &LINEAR_INTEGRATION, { 
          -temp_limit, 0.0, temp_limit
        }),
        newDimension(temp_inlet_c, &LINEAR_INTEGRATION, { 
          -temp_limit, 0.0, temp_limit
        })
      ), newDataVec({
         0.0,           temp_limit,   temp_limit*2,
        -temp_limit,    0.0,          temp_limit,
        -temp_limit*2, -temp_limit,   0.0
      }));
    tables.push_back(std::unique_ptr<Table>(temp_delta));

    Table* solenoid_duty = newTable(new std::string("intercooler_solenoid_duty"),
      newDimensionVec(
        newDimension(temp_delta_target, &LINEAR_INTEGRATION, { 
          TRACK_MODE_T_DELTA_F, DRAG_MODE_T_DELTA_F
        }),
        newDimension(temp_delta, &LINEAR_INTEGRATION, { 
          0.0, TRACK_MODE_T_DELTA_F, DRAG_MODE_T_DELTA_F
        })
      ), newDataVec({
         0.0, 0.0,
         1.0, (TRACK_MODE_T_DELTA_F/DRAG_MODE_T_DELTA_F),
         1.0, 1.0
      }));
    tables.push_back(std::unique_ptr<Table>(solenoid_duty));

    //Non-linearize the t_delta table
    Table* solenoid_duty_corr = newTable(new std::string("intercooler_solenoid_duty_corr"),
      newDimensionVec(
        newDimension(solenoid_duty, &LINEAR_INTEGRATION, { 
          0.00, 0.01, 0.02, 0.8, 1.0
        })
      ), newDataVec({
         0.00, 0.00, 0.01, 1.00, 1.00
      }));
    tables.push_back(std::unique_ptr<Table>(solenoid_duty_corr));

    Table* solenoid_duty_final = newTable(new std::string("intercooler_solenoid_final"),
      newDimensionVec(
        newDimension(solenoid_duty_corr, &LINEAR_INTEGRATION, { 
          0.00, 1.00
        }),
        newDimension(shot->getPrimaryValue(), &FLOOR_INTEGRATION, { 
          0.00, 1.00
        }),
        newDimension(throttle_trigger, &FLOOR_INTEGRATION, { 
          0.00, 1.00
        })
      ), newDataVec({
         // Throttle trigger not engaged
         0.00, 0.00, // Shot is not pressed (throttle trigger cuts us)
         1.00, 1.00, // Shot is pressed

         // Throttle trigger engaged
         0.00, 1.00, // Shot is not pressed (duty cycle passthrough)
         1.00, 1.00 // Shot is pressed (throttle trigger is on)
      }));
    tables.push_back(std::unique_ptr<Table>(solenoid_duty_final));

    // Create a PWM output signal
    Serial.write("Constructing outputs...\n");
    std::string* pwm_name = new std::string("intercooler_solenoid_duty");
    GPIOOutput* pwmOutput = new GPIOOutput(pwm_name, solenoid_duty_final, nullptr, GPIO_NUM_23, 
      GPIOOUTPUT_RESISTOR_MODE_PULLDOWN, GPIOOUTPUT_TYPE_PWM);
    outputs.push_back(std::unique_ptr<Output>(pwmOutput));
    
    Serial.write("Setting up outputs...\n");
    for (auto const& o : outputs) {
      Serial.write("Setting up output ");
      Serial.write(o->getName()->c_str());
      Serial.write("...\n");

      o->setup();
    }
    
    Serial.write("Done.\n");
 }

 void loop() {

    #if defined(DEBUG)
    Serial.write("[=======FRAME=======]\n");
    #endif

    // Update all inputs
    for (auto& i : inputs){
      i->read();
      #if defined(DEBUG)
      Serial.write("SENS  ");
      double i_val = i->getPrimaryValue()->get();
      Serial.write(i->getName()->c_str());
      Serial.write(": ");
      Serial.write(std::to_string(i_val).c_str());
      Serial.write("\n");
      #endif
    }


    #if defined(DEBUG)
    for (auto& t : tables){
      double t_val = t->get();
      Serial.write("TABLE ");
      Serial.write(t->getName()->c_str());
      Serial.write(": ");
      Serial.write(std::to_string(t_val).c_str());
      Serial.write("\n");
    }
    #endif

    // Update all outputs (also calls tables)
    for (auto& o : outputs){
      double sent = o->send();

      #if defined(DEBUG)
      Serial.write("OUT   ");
      Serial.write(o->getName()->c_str());
      Serial.write(": ");
      Serial.write(std::to_string(sent).c_str());
      Serial.write("\n");
      #endif
    }

    #if defined(DEBUG)
    delay(500);
    #endif
 }

 #else
int main(int argc, char **argv)
{
    return -1;
}
#endif